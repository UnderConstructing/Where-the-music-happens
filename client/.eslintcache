[{"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\index.js":"1","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\App.js":"2","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\sequencer.js":"3","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\attempt.js":"4","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\register.js":"5","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\login.js":"6","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\Login.js":"7","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\PrivateRoute.js":"8"},{"size":198,"mtime":1611621803878,"results":"9","hashOfConfig":"10"},{"size":1290,"mtime":1611793762607,"results":"11","hashOfConfig":"10"},{"size":9524,"mtime":1611717017891,"results":"12","hashOfConfig":"10"},{"size":401,"mtime":1611625795376,"results":"13","hashOfConfig":"10"},{"size":917,"mtime":1611687446663,"results":"14","hashOfConfig":"10"},{"size":903,"mtime":1611689418480,"results":"15","hashOfConfig":"10"},{"size":903,"mtime":1611689418480,"results":"16","hashOfConfig":"10"},{"size":441,"mtime":1611767631325,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"r5vj0r",{"filePath":"21","messages":"22","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\index.js",[],["37","38"],"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\App.js",["39","40","41","42","43","44","45"],"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\sequencer.js",["46","47","48","49","50"],"import React, { useState } from 'react'\r\nimport './App.css'\r\nimport kickArray from './kick.json';\r\nimport snareArray from './snare.json';\r\nimport melodyArray from './melody.json'\r\nimport * as Tone from 'tone';\r\nimport { PromiseProvider } from 'mongoose';\r\n\r\n\r\n\r\nexport default function Sequencer() {\r\nconst [playing, setPlaying] = useState(\"not-playing\")\r\nconsole.log(snareArray)\r\nconst gainNode = new Tone.Gain(0).toDestination()\r\nfunction activateSnare(event) {\r\n  console.log(\"id= \" + event.target.id)\r\n  if (snareArray[event.target.id - 1].isActive === false) {\r\n    snareArray[event.target.id - 1].isActive = true\r\n  }\r\n  else {\r\n    snareArray[event.target.id - 1].isActive = false\r\n  }\r\n  console.log(`test is active: ${snareArray[event.target.id - 1].isActive}`)\r\n}\r\n\r\nfunction activateKick(event) {\r\n  console.log(event.target)\r\n  if (kickArray[event.target.id - 1].isActive === false) {\r\n    kickArray[event.target.id - 1].isActive = true\r\n  }\r\n  else {\r\n    kickArray[event.target.id - 1].isActive = false\r\n  }\r\n  console.log(event.target)\r\n}\r\n\r\nfunction activateNote(e) {\r\n  if (melodyArray[e.target.getAttribute(\"row\") - 1][(e.target.id - 1)].isActive === false) {\r\n    melodyArray[e.target.getAttribute(\"row\") - 1][(e.target.id - 1)].isActive = true\r\n  }\r\n  else {\r\n    melodyArray[e.target.getAttribute(\"row\") - 1][(e.target.id - 1)].isActive = false\r\n  }\r\n  // console.log(melodyArray[e.target.getAttribute(\"row\") - 1][(parseInt(e.target.id)/parseInt(e.target.getAttribute('row'))) - 1].id)\r\n}\r\n\r\nconst filter = new Tone.Filter(200, 'lowpass')\r\n// const filter1 = new Tone.Filter(1000, 'highpass', -48)\r\n// const filter2 = new Tone.Filter(1000, 'highpass', -48)\r\n// const filter3 = new Tone.Filter(1000, 'highpass', -48)\r\n// const filter4 = new Tone.Filter(1000, 'highpass', -48)\r\n// const filter5 = new Tone.Filter(1000, 'highpass', -48)\r\n// const filter6 = new Tone.Filter(1000, 'highpass', -48)\r\n// const filter7 = new Tone.Filter(1000, 'highpass', -48)\r\n//get transport moving\r\nlet index = 0;\r\nlet reverb = new Tone.JCReverb({\r\n  roomSize:.7\r\n})\r\nconst kick = new Tone.MembraneSynth({\r\n  pitchDecay: 2,\r\n  octaves: 2,\r\n  oscillator: {type: 'sine'},\r\n  envelope: {\r\n    attack: 0\r\n  }\r\n}).sync()\r\nkick.connect(reverb)\r\nconst snare = new Tone.MetalSynth({\r\n    frequency: 1500,\r\n    envelope: {\r\n        attack: 0,\r\n        sustain: 0.01,\r\n        decay: .8,\r\n        release: 0.2\r\n    },\r\n    harmonicity: 100,\r\n    modulationIndex: 24,\r\n    resonance: 4000,\r\n    octaves: 1.5\r\n  }).sync()\r\n\r\n  snare.connect(reverb)\r\n\r\nconst synths = [\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }),\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }),\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }),\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }),\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }),\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }), \r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  }),\r\n  new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  })\r\n]\r\n\r\n\r\nsynths.forEach(synth => synth.sync())\r\n// synths.forEach(synth => {\r\n//   synth.connect(filter)})\r\nTone.Transport.scheduleRepeat(repeat, \"16n\")\r\nTone.Transport.bpm.value = 80\r\n//callback for note triggering\r\nasync function repeat(time) {\r\n  Tone.setContext(new Tone.Context({ latencyHint: 0}))\r\n  Tone.Transport.context.lookAhead = 1\r\n  await Tone.start()\r\n  let step = index % 16\r\n  if (snareArray[step].isActive === true) {\r\n    snare.triggerAttackRelease('C2', '8n', time).toDestination()\r\n  }\r\n  if (kickArray[step].isActive === true) {\r\n    kick.triggerAttackRelease('C1', '8n', time).toDestination()\r\n  }\r\n  for (var i = 0; i < melodyArray.length; i++) {\r\n    let row = melodyArray[i]\r\n    let note = row[i].note\r\n    let $synth = synths[i]\r\n    if (row[step].isActive === true) {\r\n      $synth.triggerAttackRelease(note, '8n', time).toDestination()\r\n    }\r\n  }\r\n  index++\r\n}\r\nfunction startSequence() {\r\n  Tone.start()\r\n  Tone.Transport.start()\r\n  setPlaying()\r\n}\r\n\r\n//try to connect synth to filter\r\nfunction testSynth() {\r\n  const tester = new Tone.MonoSynth({\r\n    frequency : 'C4',\r\n    detune : 0 ,\r\n    oscillator : {\r\n    type : 'square'\r\n    } ,\r\n    filter : {\r\n    frequency: 100,\r\n    type : 'lowpass' ,\r\n    rolloff : -48\r\n    } ,\r\n    envelope : {\r\n    attack : 0.1 ,\r\n    decay : 0.1 ,\r\n    sustain : 0.9 ,\r\n    release : 1\r\n    } ,\r\n    filterEnvelope : {\r\n    attack : .1 ,\r\n    decay : .5,\r\n    sustain : 1 ,\r\n    release : 2 ,\r\n    baseFrequency : 100 ,\r\n    octaves : 2 ,\r\n    exponent : 2\r\n    }\r\n  })\r\n\r\n  tester.triggerAttackRelease('C4', '2n').toDestination()\r\n}\r\nreturn (\r\n  <div className=\"main\">\r\n    <div className=\"sub\">\r\n      <h1 className=\"title\">Sequencer!</h1>\r\n    </div>\r\n    <h2 key=\"drums\">Drums</h2>\r\n    <div key=\"snare\" className=\"row\">\r\n      {snareArray.map((note) => (\r\n        <div className=\"parent\">\r\n        <input type=\"checkbox\" text={note.note} onClick={activateSnare} key={note.id+16} className=\"box\" id={note.id}>\r\n        </input>\r\n        <label></label>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div key=\"kick\" className=\"row\">\r\n      {kickArray.map((note) => (\r\n        <div className=\"parent\">\r\n        <input type=\"checkbox\" text={note.note} onClick={activateKick} key={note.id + 8} className=\"box\" id={note.id}>\r\n        </input>\r\n        <label></label>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <h2>Melody</h2>\r\n    <div >\r\n      {melodyArray.map((row, i) => (\r\n        <div id={row[i].note} className=\"row\">\r\n          {row.map(subdivision => (\r\n            <div className='parent'>\r\n            <input type=\"checkbox\" text={subdivision.note} onChange={activateNote} key={`${subdivision.row}${subdivision.id}`} row={subdivision.row} className={`box ${subdivision.backgroundColor} `} id={subdivision.id}></input>\r\n            <label for={subdivision.id}></label>\r\n            </div>\r\n            )\r\n          )}\r\n        </div>\r\n      )\r\n      )}\r\n    </div>\r\n    <a key=\"start\" className={\"button play\"} onClick={startSequence}><p></p></a>\r\n    <button onClick={testSynth}>Test filter hookup</button>\r\n  </div>\r\n)}","C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\attempt.js",[],"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\register.js",[],"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\login.js",[],"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\Login.js",[],"C:\\Users\\lwall\\Desktop\\project-3\\Where-the-music-happens\\client\\src\\PrivateRoute.js",["51"],"import React from 'react'\r\nimport {Route, Redirect, Component} from 'react-router-dom'\r\n\r\nexport default function PrivateRoute({ component: Component, handleChildFunc, ...rest }) {\r\n    const user = \"token from cookie\";\r\n    return <Route {...rest} render={(props) => (\r\n        user !== null\r\n            ? <Component {...props} user={user} handleChildFunc={handleChildFunc}/>\r\n            : <Redirect to='/login' />\r\n        )} \r\n    />\r\n}",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":17},{"ruleId":"56","severity":1,"message":"60","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":18},{"ruleId":"56","severity":1,"message":"61","line":4,"column":13,"nodeType":"58","messageId":"59","endLine":4,"endColumn":17},{"ruleId":"56","severity":1,"message":"62","line":5,"column":10,"nodeType":"58","messageId":"59","endLine":5,"endColumn":16},{"ruleId":"56","severity":1,"message":"63","line":5,"column":18,"nodeType":"58","messageId":"59","endLine":5,"endColumn":31},{"ruleId":"56","severity":1,"message":"64","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":19},{"ruleId":"56","severity":1,"message":"65","line":13,"column":8,"nodeType":"58","messageId":"59","endLine":13,"endColumn":20},{"ruleId":"56","severity":1,"message":"66","line":7,"column":10,"nodeType":"58","messageId":"59","endLine":7,"endColumn":25},{"ruleId":"56","severity":1,"message":"67","line":12,"column":8,"nodeType":"58","messageId":"59","endLine":12,"endColumn":15},{"ruleId":"56","severity":1,"message":"68","line":14,"column":7,"nodeType":"58","messageId":"59","endLine":14,"endColumn":15},{"ruleId":"56","severity":1,"message":"69","line":47,"column":7,"nodeType":"58","messageId":"59","endLine":47,"endColumn":13},{"ruleId":"70","severity":1,"message":"71","line":409,"column":5,"nodeType":"72","endLine":409,"endColumn":70},{"ruleId":"56","severity":1,"message":"73","line":2,"column":26,"nodeType":"58","messageId":"59","endLine":2,"endColumn":35},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'kickArray' is defined but never used.","Identifier","unusedVar","'snareArray' is defined but never used.","'Tone' is defined but never used.","'isNote' is defined but never used.","'MembraneSynth' is defined but never used.","'melodyArray' is defined but never used.","'PrivateRoute' is defined but never used.","'PromiseProvider' is defined but never used.","'playing' is assigned a value but never used.","'gainNode' is assigned a value but never used.","'filter' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]