[{"C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\index.js":"1","C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\App.js":"2","C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\Row.js":"3","C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\Box.js":"4"},{"size":197,"mtime":1610928428188,"results":"5","hashOfConfig":"6"},{"size":4076,"mtime":1611422950918,"results":"7","hashOfConfig":"6"},{"size":126,"mtime":1610913101025,"results":"8","hashOfConfig":"6"},{"size":247,"mtime":1611336664846,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1xpxmwn",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\index.js",[],["21","22"],"C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\App.js",["23","24","25","26"],"import React from 'react';\nimport kickArray from './kick.json';\nimport snareArray from './snare.json';\nimport * as Tone from 'tone';\nimport Box from './Box'\nimport { isNote, MembraneSynth } from 'tone';\nimport Row from './Row'\nimport melodyArray from './melody.json'\nimport './App.css'\n\nexport default function App() {\n  console.log(snareArray)\n\n  function activateSnare(event) {\n    console.log(\"id= \" + event.target.id)\n    if (snareArray[event.target.id - 1].isActive === false) {\n      snareArray[event.target.id - 1].isActive = true\n    }\n    else {\n      snareArray[event.target.id - 1].isActive = false\n    }\n    console.log(`test is active: ${snareArray[event.target.id - 1].isActive}`)\n  }\n\n  function activateKick(event) {\n    console.log(event.target)\n    if (kickArray[event.target.id - 1].isActive === false) {\n      kickArray[event.target.id - 1].isActive = true\n    }\n    else {\n      kickArray[event.target.id - 1].isActive = false\n    }\n    console.log(event.target)\n  }\n\n  function activateNote(e) {\n    if (melodyArray[e.target.getAttribute(\"row\") - 1][e.target.id - 1].isActive === false) {\n      melodyArray[e.target.getAttribute(\"row\") - 1][e.target.id - 1].isActive = true\n      melodyArray[e.target.getAttribute(\"row\") - 1][e.target.id - 1].backgroundColor = \"red\" \n    }\n    else {\n      melodyArray[e.target.getAttribute(\"row\") - 1][e.target.id - 1].isActive = false\n      melodyArray[e.target.getAttribute(\"row\") - 1][e.target.id - 1].backgroundColor = \"white\"\n    }\n  }\n\n\n  //get transport moving\n  let index = 0;\n  const kick = new Tone.MembraneSynth().toDestination()\n  const snare = new Tone.MetalSynth({\n      frequency: 10,\n      envelope: {\n          attack: 0.0001,\n          sustain: 0.01,\n          decay: 1,\n          release: 0.2\n      },\n      harmonicity: .15 ,\n      modulationIndex: 64,\n      resonance: 50,\n      octaves: 10\n    }).toDestination()\n\n  const synths = [\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth(),\n    new Tone.Synth()\n  ]\n  Tone.Transport.scheduleRepeat(repeat, \"16n\")\n\n  //callback for note triggering\n  function repeat() {\n    let step = index % 16\n    if (snareArray[step].isActive === true) {\n      snare.triggerAttackRelease('C2', '8n')\n    }\n    if (kickArray[step].isActive === true) {\n      kick.triggerAttackRelease('C4', '8n')\n    }\n    for (var i = 0; i < melodyArray.length; i++) {\n      let row = melodyArray[i]\n      let note = row[i].note\n      let $synth = synths[i]\n      if (row[step].isActive === true) {\n        $synth.triggerAttackRelease(note, '8n').toDestination()\n      }\n    }\n    index++\n  }\n  function startSequence() {\n    Tone.start()\n    Tone.Transport.start()\n  }\n\n  return (\n    <div>\n      <div>\n        <h1>Sequencer!</h1>\n      </div>\n      <h2 key=\"drums\">Drums</h2>\n      <div key=\"snare\" className=\"row\">\n        {snareArray.map((note) => (\n          <input type=\"checkbox\" text={note.note} onClick={activateSnare} key={note.id} className=\"box\" id={note.id}>\n          </input>\n        ))}\n      </div>\n      <div key=\"kick\" className=\"row\">\n        {kickArray.map((note) => (\n          <input type=\"checkbox\" text={note.note} onClick={activateKick} key={note.id + 8} className=\"box\" id={note.id}>\n          </input>\n        ))}\n      </div>\n      <h2>Melody</h2>\n      <div>\n        {melodyArray.map((row, i) => (\n          <div key={row[i]} className=\"row\">\n            {row.map(subdivision => (\n              <input type=\"checkbox\" text={subdivision.note} onClick={activateNote} key={subdivision.id} row={subdivision.row} className={`box ${subdivision.backgroundColor} `} id={subdivision.id}></input>\n            )\n            )}\n          </div>\n        )\n        )}\n      </div>\n      <button key=\"start\" className={\"play\"} onClick={startSequence}>startSequence</button>\n    </div>\n\n  )\n}","C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\Row.js",[],"C:\\Users\\lwall\\Desktop\\Where-the-music-happens\\client\\src\\Box.js",["27","28"],"import React, { useReducer, useState } from 'react'\r\n\r\nexport default function Box(props) {\r\n  // const [color, setColor] = useReducer(\"red\")\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <p>{props.text}</p>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":5,"column":8,"nodeType":"35","messageId":"36","endLine":5,"endColumn":11},{"ruleId":"33","severity":1,"message":"37","line":6,"column":10,"nodeType":"35","messageId":"36","endLine":6,"endColumn":16},{"ruleId":"33","severity":1,"message":"38","line":6,"column":18,"nodeType":"35","messageId":"36","endLine":6,"endColumn":31},{"ruleId":"33","severity":1,"message":"39","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":11},{"ruleId":"33","severity":1,"message":"40","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":27},{"ruleId":"33","severity":1,"message":"41","line":1,"column":29,"nodeType":"35","messageId":"36","endLine":1,"endColumn":37},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'isNote' is defined but never used.","'MembraneSynth' is defined but never used.","'Row' is defined but never used.","'useReducer' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]